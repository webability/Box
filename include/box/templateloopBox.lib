<?php

/*
    templateloopBox.lib, Box Model, A pattern for Real-life Web Programming
    Creates an array of templates based on an array of records: apply same template to each record.
    (c) 2012 Philippe Thomassigny

    This file is part of Box Model

    Box Model is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Box Model is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DomCore.  If not, see <http://www.gnu.org/licenses/>.
*/

/* @UML_Box
|------------------------------------------------------------------|
| templateloopBox: basic box class                                             |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

// load a template then replace the elements into it
// entry: array of elements
// exit: template with replaced elements
// params: template name and place

class templateloopBox extends Box
{
  public function __construct()
  {
    parent::__construct();

    $this->addInput('SELECTED', Box::STRING, '');
    $this->addInput('language', Box::LANGUAGE);
    $this->addInput('template', Box::TEMPLATE);
    $this->addInput('list', Box::VECTORRECORD);

    $this->addOutput('list', Box::VECTORTEMPLATE);
  }

  public function run()
  {
    // execute a loop on the templateBox run with our data
    // template is a collection of subtemplates

    $t = $this->getInputData('template');
    if (!$t)
      return;

    $select = $this->getInputData('SELECTED');
    $l = $this->getInputData('language');
    $list = $this->getInputData('list');

    $res = array();
    foreach($list as $k => $li)
    {
      $metaelements = $li;
      if ($l)
      {
        foreach($l as $lk => $le)
        {
          $metaelements['##'.$lk.'##'] = $le;
        }
      }
      $tmp = $t->getTemplate('base.key.'.$k);
      if (!$tmp && $select && $k == $select)
        $tmp = $t->getTemplate('base.selected');
      if (!$tmp)
        $tmp = $t->getTemplate('base');
      if (!$tmp)
        continue;

      $tmp->metaElements($metaelements);
      $res[] = array('key' => $k, 'template' => $tmp);
    }
    $this->setOutputData('list', $res);
  }

}

?>